import {Component, OnInit} from '@angular/core';
import {HttpClient} from "@angular/common/http";
import {Observable} from "rxjs";
import {Match_response_interface} from "../Interfaces/Match_response_interface";
import {Match} from "../Interfaces/Match_interface";
import {Random_match_response} from "../Interfaces/Random_match_response";
import {Date_interface} from "../Interfaces/Date_interface";
// import {Date_interface} from "../Interfaces/Date_interface";

@Component({
  selector: 'app-match',
  templateUrl: './match.component.html',
  styleUrls: ['./match.component.css']
})

export class MatchComponent implements OnInit {
  matchData: Match_response_interface;
  matchList: Match[];

  searchList: Match[];

  randMatchData: Random_match_response;
  randomMatch : Match;

  searchListExist: boolean = false;
  // dateObj: Date_interface;

  constructor(private httpClient: HttpClient) {

    this.getMatches().subscribe(list => {
      this.matchData = list;
      this.matchList = this.matchData.response;
      console.log("LIST: " + list);
      console.log(list);
      console.log("TABLE: " + this.matchList);
      console.log(this.matchList);
    });
  }

  ngOnInit(): void {
  }

  getLeagueMatchesSorted(){
    this.searchListExist = false;
    this.getSortedMatches().subscribe(matchList => {
      this.matchData = matchList;
      this.matchList = this.matchData.response;
      console.log("LIST: " + matchList);
      console.log(matchList);
      console.log("TABLE: " + this.matchList);
      console.log(this.matchList);
    });
  }

  displayRandomMatch(){
    this.getRandomMatch().subscribe(randMatch =>{
      this.randMatchData = randMatch;
      this.randomMatch = this.randMatchData.response;
      alert("RANDOM MATCH\n\n" + "Date : " + this.randomMatch.date.day + "." + this.randomMatch.date.month + "." +
        this.randomMatch.date.year + "\n\nHome Club : " + this.randomMatch.homeClubName + "\nHome Club score : " +
        this.randomMatch.homeClubScore + "\n\nVisiting Club : " + this.randomMatch.visitingClubName +
        "\nVisiting Club score : " + this.randomMatch.visitingClubScore);
      // console.log("Rand match: " + randMatch);
      // console.log(randMatch);
      // console.log("Random match: " + this.randomMatch);
      // console.log(this.randomMatch);
    });
  }

  /*-------------------------------------------------------------------------------------------------------------------*/
  // onSubmit(matchItem){
  //   // this.getMatches().subscribe(filteredMatches =>{
  //   //   this.matchData = filteredMatches;
  //   //   this.matchList = this.matchData.response;
  //   // })
  //
  //   // this.matchList = [];
  //   // console.log(this.matchList)
  //
  //   let splitDate = matchItem.matchDate.split(".", 3);
  //   console.log("split : " + splitDate.toString());
  //
  //   let dateObj: Date_interface = {day:parseInt(splitDate[0]), month: parseInt(splitDate[1]), year: parseInt(splitDate[2])};
  //
  //   // dateObj.day = parseInt(splitDate[0]);
  //   // dateObj.month = parseInt(splitDate[1]);
  //   // dateObj.year = parseInt(splitDate[2]);
  //
  //   console.log(dateObj);
  //
  //   // console.log("Filtered : " + this.matchList.filter(matchItem));
  //   let enteredDate = dateObj.day + "." + dateObj.month + "." + dateObj.year;
  //   let iterateDate;
  //   this.searchList = [];
  //   for(let i = 0; i < this.matchList.length - 1; i++){
  //     iterateDate = this.matchList[i].date.day + "." + this.matchList[i].date.month + "." + this.matchList[i].date.year
  //
  //     if(iterateDate == enteredDate){
  //       // this.matchList[i].pop()
  //
  //       // this.searchList.push(this.matchList[i]);
  //
  //       // const searchList = Match[];
  //       // this.searchList = [];
  //
  //       const pushVariable = this.searchList.push(this.matchList[i]);
  //
  //       console.log("searchList :" + this.searchList);
  //       console.log("It worked  " + this.matchList[i]);
  //       console.log(this.matchList[i]);
  //     }
  //   }
  //   this.searchListExist = true;
  //   console.log(matchItem.matchDate);
  // }

  onSubmit(matchItem){
    let splitDate = matchItem.matchDate.split(".", 3);
    console.log("split : " + splitDate.toString());

    let dateObj: Date_interface = {day:parseInt(splitDate[0]), month: parseInt(splitDate[1]), year: parseInt(splitDate[2])};
    console.log(dateObj);

    let enteredDate = dateObj.day + "." + dateObj.month + "." + dateObj.year;
    let iterateDate;
    this.searchList = [];

    // if(this.matchList != null){
    //   for(let i = 0; i < this.matchList.length-1; i++){
    //     iterateDate = this.matchList[i].date.day + "." + this.matchList[i].date.month + "." + this.matchList[i].date.year
    //
    //     if(iterateDate == enteredDate){
    //       const pushVariable = this.searchList.push(this.matchList[i]);
    //
    //       console.log("searchList :" + this.searchList);
    //       console.log("It worked  " + this.matchList[i]);
    //       console.log(this.matchList[i]);
    //     }
    //   }
    // }

    for(let i = 0; i < this.matchList.length; i++){
      iterateDate = this.matchList[i].date.day + "." + this.matchList[i].date.month + "." + this.matchList[i].date.year

      if(iterateDate == enteredDate){
        const pushVariable = this.searchList.push(this.matchList[i]);

        console.log("searchList :" + this.searchList);
        console.log("It worked  " + this.matchList[i]);
        console.log(this.matchList[i]);
      }
    }
    this.searchListExist = true;
    console.log(matchItem.matchDate);
  }
  /*-------------------------------------------------------------------------------------------------------------------*/

  getMatches(): Observable<Match_response_interface> {
    return this.httpClient.get<Match_response_interface>('/matches');
  }

  getSortedMatches(): Observable<Match_response_interface> {
    return this.httpClient.get<Match_response_interface>('/sortMatches');
  }

  getRandomMatch(): Observable<Random_match_response> {
    return this.httpClient.get<Random_match_response>('/randomMatch');
  }
}

